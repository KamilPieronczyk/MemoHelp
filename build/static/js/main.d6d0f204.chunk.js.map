{"version":3,"sources":["components/NavBar.js","screens/Calendar/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","Container","styled","div","dayNames","monthNames","now","Date","startingDate","setDate","calendarStartingDate","getDate","getDay","Calendar","console","log","Days","style","color","fontSize","fontWeight","marginTop","getMonth","getFullYear","GridContainer","PrepareCalendarDays","days","monthDays","i","reminders","Array","push","CalendarDay","dayNumber","reminds","React","Component","props","GridItem","textAlign","DayNumber","p","Body","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"scAGe,SAASA,IACtB,OACE,cAACC,EAAD,UACE,0CAKN,IAAMA,EAAYC,IAAOC,IAAV,K,m4BCRf,IAAMC,EAAW,CAAC,MAAO,MAAO,WAAO,MAAO,WAAO,MAAO,OACtDC,EAAa,CAAC,eAAW,OAAQ,SAAU,gBAAY,MAAO,WAAY,SAAU,gBAAY,gBAAY,mBAAe,WAAY,iBACzIC,EAAM,IAAIC,KAEVC,EAAe,IAAID,KAAKD,EAAIG,QAAQ,IACpCC,EAAuB,IAAIH,KAAKC,EAAaC,QAAQD,EAAaG,WAAcH,EAAaI,SAAS,GAAG,EAAK,IAY3G,SAASC,IAEZ,OADAC,QAAQC,IAAIC,MAER,gCACA,oBAAGC,MAAS,CAACC,MAAO,QAASC,SAAU,GAAIC,WAAY,OAAQC,WAAY,IAA3E,UACKhB,EAAWC,EAAIgB,YADpB,IACkChB,EAAIiB,iBAEtC,cAACC,EAAD,UACG,cAAC,EAAD,S,IAMLC,E,uKAIE,IAFA,IAAMC,EAAO,GACTC,EAAY,GACRC,EAAI,EAAGA,GAAG,GAAKA,IAAI,CACvBD,EAAUC,GAAKlB,EAAqBC,UACpCD,EAAqBD,QAAQC,EAAqBC,UAAY,GAC9D,IAAIkB,EAAY,IAAIC,MAUhBJ,EAAKK,KACD,cAACC,EAAD,CAAqBJ,EAAGA,EAAGK,UAAWN,EAAUC,GAAIM,QAASL,GAA3CD,IAG9B,OAAOF,M,GArBmBS,IAAMC,WAyBxC,SAASJ,EAAYK,GAGjB,OACI,eAACC,EAAD,WACSD,EAAMT,GAAG,EAAE,mBAAGX,MAAS,CAACsB,UAAW,SAAUrB,MAAO,OAAQC,SAAU,GAAIC,WAAY,SAAUC,WAAY,IAAjG,SAAuGjB,EAASiC,EAAMT,EAAE,KAAQ,KAC5I,cAACY,EAAD,UACEH,EAAMJ,eAMxB,IAAMT,EAAgBtB,IAAOC,IAAV,KAYbmC,EAAWpC,IAAOC,IAAV,KAYRqC,EAAYtC,IAAOuC,EAAV,K,kPCjEf,IAAMC,EAAOxC,IAAOC,IAAV,KASKwC,EA9Bf,WACE,OACE,cAACD,EAAD,UACE,eAAC,IAAD,WACE,cAAC1C,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4C,KAAK,SAAZ,mBAGA,cAAC,IAAD,CAAOA,KAAK,YAAZ,SACE,cAAC/B,EAAD,MAEF,cAAC,IAAD,CAAO+B,KAAK,IAAZ,2BCVKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,sBAAMC,IAAI,aAAaC,KAAK,gFAC5B,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.d6d0f204.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <Container>\r\n      <span>Item</span>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  padding: 30px 0 30px 0;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-self: center;\r\n`\r\n","import React from \"react\"\r\nimport styled from 'styled-components'\r\n\r\nconst dayNames = ['pon', 'wto', 'śro', 'czw', 'pią', 'sob', 'nie'];\r\nconst monthNames = ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'];\r\nvar now = new Date();\r\n\r\nvar startingDate = new Date(now.setDate(1));\r\nvar calendarStartingDate = new Date(startingDate.setDate(startingDate.getDate() - ((startingDate.getDay()+7)%8) + 1));\r\n\r\nvar remindersList = [\r\n    {\r\n        day: 20,\r\n        month: 11,\r\n        year: 2020,\r\n        time: '10:30',\r\n        text: 'cos tam bla bla',\r\n    }\r\n]\r\n\r\nexport function Calendar(){\r\n    console.log(Days);\r\n    return( \r\n        <div>\r\n        <p style = {{color: \"black\", fontSize: 24, fontWeight: 'Bold', marginTop: -30}}>\r\n            {monthNames[now.getMonth()]} {now.getFullYear()}\r\n        </p>\r\n        <GridContainer>\r\n           <PrepareCalendarDays/>\r\n        </GridContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PrepareCalendarDays extends React.Component{\r\n    render(){\r\n        const days = [];\r\n        var monthDays = [];\r\n        for(var i = 1; i<=6*7; i++){\r\n            monthDays[i] = calendarStartingDate.getDate();\r\n            calendarStartingDate.setDate(calendarStartingDate.getDate() + 1);\r\n            var reminders = new Array;\r\n    \r\n            // for(var j = 1; j<remindersList.length; j++){\r\n            //     if(monthDays[i].getMonth() == remindersList[j].month && monthDays[i] == remindersList[j].day){\r\n            //         console.error(\"reminder: \", remindersList[j]);\r\n            //         reminders.push(\r\n            //             remindersList[j]\r\n            //         );\r\n            //     }  \r\n            // }\r\n                days.push(                \r\n                    <CalendarDay key={i} i={i} dayNumber={monthDays[i]} reminds={reminders}/>\r\n                    );\r\n       } \r\n        return days;\r\n    }\r\n}\r\n\r\nfunction CalendarDay(props){\r\n    var reminds = [];\r\n    // console.log(\"props: \",props);\r\n    return(\r\n        <GridItem>\r\n                {props.i<=7?<p style = {{textAlign: \"center\" ,color: \"gray\", fontSize: 24, fontWeight: 'Medium', marginTop: -30}}>{dayNames[props.i-1]}</p>:null}\r\n                <DayNumber>\r\n                 {props.dayNumber}\r\n                </DayNumber>\r\n        </GridItem>\r\n    )\r\n }\r\n\r\nconst GridContainer = styled.div`\r\ndisplay: grid;\r\nheight: 90%;\r\ngrid-auto-rows: 1fr;\r\nborder-radius: 25;\r\ngrid-template-columns: repeat(7, auto);\r\nborder-right: #9C9083 solid 1px;\r\nborder-bottom: #9C9083 solid 1px;\r\nborder-radius: 12px;\r\nbox-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n`\r\n\r\nconst GridItem = styled.div`\r\npadding: 30px;\r\nbackground-color: white;\r\nborder-left: #9C9083 solid 1px;\r\nborder-top: #9C9083 solid 1px;\r\n\r\n&:nth-child(1){border-top-left-radius: 12px;};\r\n&:nth-child(7){border-top-right-radius: 12px;};\r\n&:nth-child(36){border-bottom-left-radius: 12px;};\r\n&:nth-child(42){border-bottom-right-radius: 12px;};\r\n`\r\n\r\nconst DayNumber = styled.p`\r\ntext-align: center;\r\ncolor: black;\r\nfont-size: 18; \r\nfont-weight: bold;\r\nmargin-top: -25px;\r\n`","import React from \"react\"\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\"\r\nimport styled from 'styled-components'\r\nimport {NavBar} from './components'\r\nimport {Calendar} from './screens/Calendar/Calendar'\r\n\r\nfunction App() {\r\n  return (\r\n    <Body>\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route path=\"/login\">\r\n            Login\r\n          </Route>\r\n          <Route path=\"/calendar\">\r\n            <Calendar></Calendar>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            Home\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </Body>\r\n  );\r\n}\r\n\r\nconst Body = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  padding: 0 120px 0 120px;\r\n  box-sizing: border-box;\r\n  background-image: url(\"./assets/background.png\");\r\n  background-size: cover;\r\n`\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}